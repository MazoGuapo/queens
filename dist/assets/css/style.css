@tailwind base;
@tailwind components;
@tailwind utilities;
:root {
  --padding_mobile: 2rem;
  --padding_ipad: 5rem;
  --padding_ipadH: 4rem;
  --padding_laptop: 9rem;
  --padding_desktop: 12rem;
  --padding_wide: 21rem;
  --paddingS_mobile: 7rem;
  --paddingS_ipad: 13rem;
  --paddingS_ipadH: 7rem;
  --paddingS_laptop: 17rem;
  --paddingS_desktop: 17rem;
  --paddingS_wide: 17rem;
}

section.module_legal, .module-width, .module-block, footer, header {
  padding-left: var(--padding_mobile);
  padding-right: var(--padding_mobile);
}
@screen ipad {
  section.module_legal, .module-width, .module-block, footer, header {
    padding-left: var(--padding_ipad);
    padding-right: var(--padding_ipad);
  }
}
@screen ipadH {
  section.module_legal, .module-width, .module-block, footer, header {
    padding-left: var(--padding_ipadH);
    padding-right: var(--padding_ipadH);
  }
}
@screen laptop {
  section.module_legal, .module-width, .module-block, footer, header {
    padding-left: var(--padding_laptop);
    padding-right: var(--padding_laptop);
  }
}
@screen desktop {
  section.module_legal, .module-width, .module-block, footer, header {
    padding-left: var(--padding_desktop);
    padding-right: var(--padding_desktop);
  }
}
@screen wide {
  section.module_legal, .module-width, .module-block, footer, header {
    padding-left: var(--padding_wide);
    padding-right: var(--padding_wide);
  }
}

section.module_legal, .module-full, .module-block, footer {
  padding-top: var(--paddingS_mobile);
  padding-bottom: var(--paddingS_mobile);
}
@screen ipad {
  section.module_legal, .module-full, .module-block, footer {
    padding-top: var(--paddingS_ipad);
    padding-bottom: var(--paddingS_ipad);
  }
}
@screen ipadH {
  section.module_legal, .module-full, .module-block, footer {
    padding-top: var(--paddingS_ipadH);
    padding-bottom: var(--paddingS_ipadH);
  }
}
@screen laptop {
  section.module_legal, .module-full, .module-block, footer {
    padding-top: var(--paddingS_laptop);
    padding-bottom: var(--paddingS_laptop);
  }
}
@screen desktop {
  section.module_legal, .module-full, .module-block, footer {
    padding-top: var(--paddingS_desktop);
    padding-bottom: var(--paddingS_desktop);
  }
}
@screen wide {
  section.module_legal, .module-full, .module-block, footer {
    padding-top: var(--paddingS_wide);
    padding-bottom: var(--paddingS_wide);
  }
}

* {
  box-sizing: border-box;
}

html {
  margin: 0;
  padding: 0 !important;
  font-size: 0.625em;
}

body {
  margin: 0;
  padding: 0 !important;
  width: 100%;
}

h1, h2, h3, h4, h5, h6 {
  margin: 0;
  padding: 0;
}

p {
  margin: 0;
}

ul {
  margin: 0;
  padding: 0;
}

li {
  margin: 0;
  padding: 0;
  list-style: none;
}

a {
  text-decoration: none;
  transition: 0.3s ease-in;
}
a:focus, a:hover, a:active {
  outline: 0;
}

/******************************/
/********* FONTFACE ***********/
/******************************/
@font-face {
  font-family: "Canela";
  src: url("../font/Canela-LightItalic.woff2") format("woff2"), url("../font/Canela-LightItalic.woff") format("woff");
  font-weight: 300;
  font-style: italic;
  font-display: swap;
}
@font-face {
  font-family: "Canela";
  src: url("../font/Canela-Light.woff2") format("woff2"), url("../font/Canela-Light.woff") format("woff");
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Canela";
  src: url("../font/Canela-ThinItalic.woff2") format("woff2"), url("../font/Canela-ThinItalic.woff") format("woff");
  font-weight: 100;
  font-style: italic;
  font-display: swap;
}
@font-face {
  font-family: "Canela";
  src: url("../font/Canela-Thin.woff2") format("woff2"), url("../font/Canela-Thin.woff") format("woff");
  font-weight: 100;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "GTAmerica";
  src: url("../font/GTAmerica-Light.woff2") format("woff2"), url("../font/GTAmerica-Light.woff") format("woff");
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "GTAmerica";
  src: url("../font/GTAmerica-Bold.woff2") format("woff2"), url("../font/GTAmerica-Bold.woff") format("woff");
  font-weight: bold;
  font-style: normal;
  font-display: swap;
}
body, p {
  @apply font-secondary font-light text-primary-dark text-base;
  color: black;
}

h1 {
  @apply text-h1;
}

h2 {
  @apply text-h2;
}

h3 {
  @apply text-h3;
}

h4 {
  @apply text-h4;
}

body {
  background-color: white;
  width: 100%;
}

hr {
  border-top: 1px solid black;
  margin-top: 1.2rem;
  margin-bottom: 1.2rem;
  width: 100%;
}
hr.white_hr {
  border-top: 1px solid white;
}

.btn {
  @apply font-secondary font-light;
  border-radius: 30px;
  border: none;
  background: transparent;
  padding: 1.2rem 2rem;
  border: 1px solid white;
  color: white;
  display: inline-block;
}
.btn:hover {
  background-color: lightgray;
  color: white;
  border: 1px solid white;
}
.btn:hover:before {
  width: 100%;
}

.btn_dark {
  @apply font-secondary font-light;
  border-radius: 30px;
  border: none;
  background: transparent;
  padding: 1.2rem 2rem;
  color: #FBF8EF;
  background-color: #948B82;
  display: inline-block;
}

/******************************/
/*********** PACE *************/
/******************************/
.pace {
  -webkit-pointer-events: none;
  pointer-events: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
      user-select: none;
  position: fixed;
  z-index: 999000;
  bottom: 0;
  left: 0;
  width: 100%;
  transform: translate3d(0, 0, 0);
  transition: transform 0.5s ease-out;
}

.pace.pace-active {
  transform: translate3d(0, 0, 0);
}

.pace .pace-progress {
  display: block;
  position: fixed;
  z-index: 999000;
  bottom: 0;
  right: 100%;
  width: 100%;
  height: 8px;
  background: white;
  pointer-events: none;
  opacity: 0.7;
}

/******************************/
/********** CUSTOM ************/
/******************************/
.cargador {
  position: fixed;
  width: 100%;
  height: 100%;
  z-index: 900000;
}
.cargador img, .cargador .cargador_bg {
  position: absolute;
  top: 50%;
  left: 50%;
}
.cargador .cargador_brand {
  max-width: 9rem;
}
@media (min-width: 768px) {
  .cargador .cargador_brand {
    max-width: 14rem;
  }
}
@media (min-width: 1400px) {
  .cargador .cargador_brand {
    max-width: 20rem;
  }
}
.cargador .cargador_bg {
  max-width: 100%;
}
@media (min-width: 768px) {
  .cargador .cargador_bg {
    max-width: 80%;
  }
}

.loaded .pace .pace-progress {
  display: none;
}

/******************************/
/******** FORMULARIOS *********/
/******************************/
.wpcf7-form {
  position: relative;
}
.wpcf7-form br {
  display: none;
}

.wpcf7-form-control.wpcf7-submit.btn {
  border-radius: 0 !important;
}

.input {
  position: relative;
  z-index: 1;
  display: inline-block;
  margin: 25px 0 10px;
  width: 100%;
  vertical-align: top;
}
@media (min-width: 992px) {
  .input {
    margin: 25px 0 10px;
  }
}
@media (min-width: 1200px) {
  .input {
    margin: 25px 0 10px;
  }
}
.input:before {
  content: "";
  display: block;
  position: absolute;
  bottom: -1px;
  left: 0;
  width: 80%;
  height: 1px;
  background: #7A736C;
}

.input__field {
  position: relative;
  z-index: 1000;
  display: block;
  float: right;
  padding: 0.5rem 0 0.8rem 0;
  width: 100%;
  height: 3.5rem;
  border: none;
  border-radius: 0;
  background: transparent;
  color: green_Claro;
  font-size: 1.6rem;
  line-height: 1.5rem;
  -webkit-appearance: none;
  /* for box shadows to show on iOS */
}
@media (min-width: 1440px) {
  .input__field {
    font-size: 1.7rem;
  }
}

.input__field:focus {
  outline: none;
}

.input__label {
  position: absolute;
  top: 0;
  left: 0;
  display: inline-block;
  z-index: 500;
  width: 100%;
  height: 100%;
  text-align: left;
  cursor: text;
  padding: 0;
  margin: 0;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.input__label-content {
  @apply text-primary font-secondary;
  position: relative;
  display: block;
  padding: 0.5rem 0 0.8rem 0;
  width: 100%;
  color: #7A736C;
  font-weight: 400;
  transform-origin: 0% 50%;
  transition: transform 0.3s;
}

.input_select select {
  border: 0;
  opacity: 0;
}
.input_select select option {
  background: white;
}

.input_select.input--filled label {
  opacity: 1;
}

.input--filled:before {
  background: green;
}

.input__field--madoka:focus:before,
.input--filled:before {
  background: green;
}

.input__field--madoka:focus select,
.input--filled select {
  opacity: 1;
}

.input__field--madoka:focus + .input__label--madoka,
.input--filled .input__label--madoka {
  cursor: default;
  pointer-events: none;
}

.input__field--madoka:focus + .input__label--madoka .input__label-content--madoka,
.input--filled .input__label-content--madoka {
  transform: translate3d(0, -100%, 0);
}

textarea {
  height: 10rem;
  overflow: hidden;
  border: 1px solid #acacac;
}

.wpcf7-acceptance {
  color: #acacac;
  font-size: 1.2rem;
  line-height: 1em;
}
.wpcf7-acceptance .wpcf7-list-item {
  margin: 0;
}
.wpcf7-acceptance a {
  color: #acacac;
  text-decoration: underline;
}

.wpcf7-checkbox span {
  color: #acacac;
  margin: 0;
}

input[type=submit] {
  @apply font-secondary font-light;
  border-radius: 30px;
  border: none;
  background: transparent;
  padding: 1.2rem 2rem;
  background: black !important;
  color: white !important;
}
input[type=submit]:hover {
  background: white !important;
  color: white !important;
}

.form_submit,
.form_thanks {
  width: 100% !important;
}

.form_thanks {
  display: none;
}

/******** CONTACT FORM 7 *********/
.wpcf7-form-control-wrap {
  display: block;
  margin-bottom: 20px;
}

div.wpcf7-response-output {
  margin: 10px 0 0;
  border: 2px solid red !important;
  color: red !important;
  font-size: 1.3rem;
  position: absolute;
  top: 0;
  left: 0;
  transform: translateY(-100%);
  margin: 0 !important;
  line-height: 1.2em;
}

div.wpcf7-validation-errors,
div.wpcf7-acceptance-missing {
  border: 2px solid red !important;
  color: red !important;
}

div.wpcf7-mail-sent-ok,
.wpcf7 form.sent .wpcf7-response-output {
  border: 2px solid #94f2b5 !important;
  color: #94f2b5 !important;
}

.wpcf7-submit {
  position: relative;
}
.wpcf7-submit .ajax-loader {
  position: absolute;
  left: 0;
  top: 50%;
  transform: translate(-100%, -50%);
  -ms-transform: translate(-100%, -50%);
  -moz-transform: translate(-100%, -50%);
  -webkit-transform: translate(-100%, -50%);
  -o-transform: translate(-100%, -50%);
}

.wpcf7 p {
  color: #acacac;
  font-size: 1.3rem !important;
}

.swiper {
  max-width: 100%;
  overflow: hidden;
  position: relative;
}

.swiper-slide {
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
}
.swiper-slide img {
  height: 50vh;
  width: auto;
}

.swiper-gallery .swiper-wrapper .swiper-slide:first-child {
  width: var(--padding_mobile);
}
@screen ipad {
  .swiper-gallery .swiper-wrapper .swiper-slide:first-child {
    width: var(--padding_ipad);
  }
}
@screen ipadH {
  .swiper-gallery .swiper-wrapper .swiper-slide:first-child {
    width: var(--padding_ipadH);
  }
}
@screen laptop {
  .swiper-gallery .swiper-wrapper .swiper-slide:first-child {
    width: var(--padding_laptop);
  }
}
@screen desktop {
  .swiper-gallery .swiper-wrapper .swiper-slide:first-child {
    width: var(--padding_desktop);
  }
}
@screen wide {
  .swiper-gallery .swiper-wrapper .swiper-slide:first-child {
    width: var(--padding_wide);
  }
}

.swiper-carousel .swiper-wrapper .swiper-slide:first-child {
  opacity: 0;
  transition: all 0.3s;
  width: 50%;
  padding-left: var(--padding_mobile);
}
@screen ipad {
  .swiper-carousel .swiper-wrapper .swiper-slide:first-child {
    padding-left: var(--padding_ipad);
  }
}
@screen ipadH {
  .swiper-carousel .swiper-wrapper .swiper-slide:first-child {
    padding-left: var(--padding_ipadH);
  }
}
@screen laptop {
  .swiper-carousel .swiper-wrapper .swiper-slide:first-child {
    padding-left: var(--padding_laptop);
  }
}
@screen desktop {
  .swiper-carousel .swiper-wrapper .swiper-slide:first-child {
    padding-left: var(--padding_desktop);
  }
}
@screen wide {
  .swiper-carousel .swiper-wrapper .swiper-slide:first-child {
    padding-left: var(--padding_wide);
  }
}
.swiper-carousel .swiper-wrapper .swiper-slide:first-child.swiper-slide-active {
  opacity: 1;
}

/******************************/
/*********** HEADER ***********/
/******************************/
.header_gracias,
.header_legal {
  background-color: transparent !important;
}
.header_gracias .header_brand,
.header_legal .header_brand {
  margin: 4rem 0 !important;
}
.header_gracias .header_brand img,
.header_legal .header_brand img {
  width: 100%;
}
.header_gracias .menu li a,
.header_legal .menu li a {
  color: white !important;
}

header {
  position: fixed;
  z-index: 2;
  top: 0;
  left: 0;
  width: 100%;
  background-color: white;
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-areas: "logo menbut";
  justify-content: center;
  align-content: center;
}
@media (min-width: 992px) {
  header {
    grid-template-areas: "logo nav";
  }
}

.shrink header {
  background-color: green_Fondos1;
  padding-top: 3rem;
}

.header_brand {
  grid-area: logo;
  justify-self: flex-start;
  align-self: center;
  margin: 1.5rem 0;
}
.header_brand img {
  width: 26px;
}
@media (min-width: 992px) {
  .header_brand img {
    width: 35px;
  }
}

.shrink header .menu__brand {
  opacity: 0;
}

header ul.menu {
  justify-self: flex-end;
  align-self: center;
  grid-area: nav;
}
header ul.menu li a {
  @apply font-secondary font-light text-primary;
  position: relative;
  display: inline-block;
  margin-right: 1rem;
}
@media (min-width: 1200px) {
  header ul.menu li a {
    margin-right: 2rem;
  }
}
@media (min-width: 1600px) {
  header ul.menu li a {
    margin-right: 3rem;
  }
}
header ul.menu li a:after {
  content: "";
  display: block;
  width: 0;
  height: 1px;
  background: white;
  bottom: 0;
  left: 0;
}
header ul.menu li a:hover {
  color: white;
}
header ul.menu li a:hover:after {
  width: 100%;
}

header ul.menu li.current a:after {
  width: 100%;
}

.shrink header ul.menu li.current a {
  color: white;
}
.shrink header ul.menu li.current a:after {
  width: 100%;
  background-color: white;
}

.shrink header ul.menu li a {
  color: white;
}
.shrink header ul.menu li a:after {
  background: white;
}
.shrink header ul.menu li a:hover {
  color: white;
}

.menu-button {
  grid-area: menbut;
  justify-self: flex-end;
  align-self: center;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  width: 40px;
  border: none;
  padding: 0;
  background: transparent;
  text-indent: 2.5em;
  font-size: 1.5em;
  color: transparent;
  text-align: right;
  cursor: pointer;
}
@media (min-width: 768px) {
  .menu-button {
    width: 32px;
  }
}
.menu-button:focus {
  outline: none;
}

.menu-button span {
  width: 100%;
  height: 2px;
  background: #645e58;
  display: block;
}
.menu-button span:nth-child(2) {
  margin-top: 10px;
}
@media (min-width: 768px) {
  .menu-button span:nth-child(2) {
    margin-top: 10px;
  }
}

.menu-button:hover span {
  width: 100%;
}

.shrink .menu-button span {
  background-color: white;
}

.wpml-ls-legacy-dropdown {
  margin-left: 4.5rem;
  width: auto;
}
@media (min-width: 1400px) {
  .wpml-ls-legacy-dropdown {
    margin-left: 7.5rem;
  }
}
@media (max-width: 1199px) {
  .wpml-ls-legacy-dropdown {
    display: none;
  }
}
.wpml-ls-legacy-dropdown a {
  background: transparent !important;
  color: white;
  border: 0;
  font-family: sans-serif;
}
.wpml-ls-legacy-dropdown a.wpml-ls-item-toggle {
  color: white !important;
  border: none !important;
  background-color: transparent !important;
  font-family: sans-serif;
  font-size: 1.7rem;
  line-height: 1em;
}
.wpml-ls-legacy-dropdown a.wpml-ls-item-toggle:hover {
  background-color: transparent !important;
}
.wpml-ls-legacy-dropdown a.wpml-ls-item-toggle:after {
  content: "";
  border: 0 !important;
  background-repeat: no-repeat !important;
  height: 10px;
  width: 10px;
  vertical-align: auto;
  background: url(../assets/img/flecha_blanca.png);
  margin-top: 3px;
}
.wpml-ls-legacy-dropdown .wpml-ls-sub-menu {
  border: 0 !important;
}

.shrink .wpml-ls-legacy-dropdown a {
  color: black !important;
}
.shrink .wpml-ls-legacy-dropdown a.wpml-ls-item-toggle:after {
  content: "";
  border: 0 !important;
  background-repeat: no-repeat !important;
  height: 10px;
  width: 10px;
  vertical-align: auto;
  background: url(../assets/img/flecha_negra.png);
  margin-top: 3px;
}
.shrink .wpml-ls-legacy-dropdown .wpml-ls-sub-menu {
  background: white;
}

.menu__wrap {
  position: fixed;
  top: 0;
  right: 0;
  z-index: 9000;
  width: 100%;
  height: 100vh;
  background-color: #cec7bc;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
}

.logo_menu_wrap {
  position: absolute;
  overflow: hidden;
  left: 2rem;
  top: 3rem;
}
@media (min-width: 768px) {
  .logo_menu_wrap {
    left: 5rem;
    top: 5rem;
  }
}
.logo_menu_wrap:focus {
  outline: none;
}
.logo_menu_wrap img {
  width: 100%;
}

.icon-list {
  text-align: center;
}

.icon-list .active a p,
.icon-list a:hover p,
.icon-list a:focus p,
.icon-list ul .current a p {
  color: white;
}

.close-button {
  display: none;
  position: absolute;
  overflow: hidden;
  border: none;
  cursor: pointer;
  right: 2rem;
  top: 3rem;
}
@media (min-width: 768px) {
  .close-button {
    right: 5rem;
    top: 5rem;
  }
}
.close-button:focus {
  outline: none;
}

.dossier_button {
  position: absolute;
  left: 50%;
  bottom: 12rem;
  transform: translateX(-50%);
}
@media (min-width: 768px) {
  .dossier_button {
    left: 50%;
    bottom: 12rem;
    transform: translateX(-50%);
  }
}

/******************************/
/*********** FOOTER ***********/
/******************************/
footer {
  position: relative;
  height: 100%;
  width: 100%;
}
footer .background {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: 0;
}
footer .background img {
  position: relative;
  height: 100%;
  width: 100%;
}
footer .grid_footer {
  position: relative;
  width: 100%;
  height: 100%;
  z-index: 2;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: auto auto auto auto;
  justify-content: center;
  align-content: center;
  grid-template-areas: "logo" "contact" "legal" "social" "copy";
}
@screen ipad {
  footer .grid_footer {
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: auto auto;
    grid-template-areas: " logo . contact legal" "copy . . social ";
  }
}
@screen ipadH {
  footer .grid_footer {
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-rows: auto auto;
    grid-template-areas: " logo . contact legal" "copy copy . social ";
  }
}
footer .grid_logo {
  grid-area: logo;
}
footer .grid_logo img {
  max-width: 45px;
}
footer .grid_contact {
  grid-area: contact;
}
footer .grid_contact .address p {
  @apply font-primary font-light text-primary text-h4;
}
footer .grid_legal {
  grid-area: legal;
}
footer .grid_copyright {
  grid-area: copy;
  justify-self: flex-start;
  align-self: flex-end;
}
footer .grid_social {
  grid-area: social;
  justify-self: flex-end;
  align-self: flex-end;
}

section.module_legal {
  background-color: #948b82;
}
section.module_legal .wrapper h1, section.module_legal .wrapper h2, section.module_legal .wrapper h3, section.module_legal .wrapper h4, section.module_legal .wrapper p {
  @apply text-white;
}
section.module_legal .wrapper h2, section.module_legal .wrapper h3, section.module_legal .wrapper h4 {
  @apply font-primary pb-14;
}
section.module_legal .wrapper p {
  @apply pb-24;
}

section.module_banner {
  position: relative;
}
section.module_banner .background {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: 0;
  overflow: hidden;
}
section.module_banner .background:before {
  position: absolute;
  height: 100%;
  width: 100%;
  z-index: 1;
  content: "";
  display: block;
  background: linear-gradient(180deg, rgba(0, 0, 0, 0.1) 0%, rgba(0, 0, 0, 0.4) 100%);
}
section.module_banner .wrapper_content {
  position: relative;
  z-index: 1;
}
section.module_banner .wrapper_content .title {
  display: flex;
  justify-content: center;
}
section.module_banner .wrapper_content .body p {
  @apply text-white;
}
section.module_banner .scroll {
  position: absolute;
  z-index: 3;
  bottom: 15%;
  left: 50%;
}
section.module_banner .scroll p {
  color: white;
  font-size: 1.3rem;
  font-weight: 700;
}

section.module_icons .wrapper_content .surtitle {
  display: flex;
  align-items: center;
}
section.module_icons .wrapper_content .surtitle::before {
  content: "";
  width: 50px;
  height: 1px;
  background: #FBF8EF;
  width: 50px;
}
section.module_icons .wrapper_content .surtitle p {
  margin-left: 15px;
}

section.module_two_columns .wrapper_content .surtitle {
  display: flex;
  align-items: center;
}
section.module_two_columns .wrapper_content .surtitle::before {
  content: "";
  width: 50px;
  height: 1px;
  background: #7A736C;
  width: 50px;
}
section.module_two_columns .wrapper_content .surtitle p {
  margin-left: 25px;
}

section.module_two_columns.active .surtitle:before {
  width: 50px;
}
section.module_two_columns.active .surtitle p {
  opacity: 1;
}

.acf-map {
  height: 100vh;
}

.wrapper_before {
  position: relative;
  max-width: 100%;
}

.wrapper_before .images {
  width: 100%;
  display: flex;
  position: relative;
}

.wrapper_before .images span {
  position: absolute;
  top: 2rem;
  left: 2rem;
  z-index: 100;
}

.wrapper_before .images .img-1 {
  height: auto;
  width: 100%;
  /* background: url("images/car.jpg") no-repeat; */
}

.wrapper_before .images .img-2 {
  position: absolute;
  height: 100%;
  width: 50%;
  right: 0;
  z-index: 200;
}

.wrapper_before .slider {
  position: absolute;
  top: 0;
  width: 100%;
  height: 100%;
  z-index: 500;
}

.wrapper_before .slider input {
  width: 100%;
  height: 100%;
  outline: none;
  background: none;
  -webkit-appearance: none;
}

.slider input::-webkit-slider-thumb {
  height: 100%;
  width: 3px;
  background: none;
  -webkit-appearance: none;
  cursor: col-resize;
}

.slider .drag-line {
  width: 3px;
  height: 100%;
  position: absolute;
  right: 49.85%;
  pointer-events: none;
  z-index: 500;
}

.slider .drag-line::before,
.slider .drag-line::after {
  position: absolute;
  content: "";
  width: 100%;
  height: 50%;
  background: #fff;
}

.slider .drag-line::before {
  top: 0;
}

.slider .drag-line::after {
  bottom: 0;
}

.slider .drag-line span {
  height: 42px;
  width: 42px;
  border: 3px solid #fff;
  position: absolute;
  top: 50%;
  left: 50%;
  border-radius: 50%;
  transform: translate(-50%, -50%);
}

.slider .drag-line span::before,
.slider .drag-line span::after {
  position: absolute;
  content: "";
  top: 50%;
  border: 10px solid transparent;
  border-bottom-width: 0px;
  border-right-width: 0px;
  transform: translate(-50%, -50%) rotate(45deg);
}

.slider .drag-line span::before {
  left: 40%;
  border-left-color: #fff;
}

.slider .drag-line span::after {
  left: 60%;
  border-top-color: #fff;
}

.module-gallery-expand {
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100vh;
  padding-bottom: 49px;
}
@media (min-width: 992px) {
  .module-gallery-expand {
    flex-direction: row;
  }
}

.module-gallery-expand-item {
  position: relative;
  height: 33.3%;
  transition: 0.8s ease;
  background-position: center;
  background-size: cover;
  background-repeat: no-repeat;
  cursor: pointer;
}
@media (min-width: 992px) {
  .module-gallery-expand-item {
    height: 100%;
    flex: 33%;
  }
}
@media (min-width: 1200px) {
  .module-gallery-expand-item:hover {
    flex: 50%;
  }
}
.module-gallery-expand-item:before {
  content: "";
  display: block;
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}
.module-gallery-expand-item > img {
  position: absolute;
  z-index: 0;
  height: 100%;
  width: 100%;
  -o-object-fit: cover;
     object-fit: cover;
  -o-object-position: center;
     object-position: center;
}
<<<<<<< Updated upstream
<<<<<<< HEAD
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
=======
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
=======
.acf-map {
  height: 100vh;
}
<<<<<<< HEAD
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
=======
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
>>>>>>> main
>>>>>>> main
>>>>>>> main
=======
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
>>>>>>> Stashed changes
